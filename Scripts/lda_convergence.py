# -*- coding: utf-8 -*-
"""
Created on Mon Jan  3 11:21:27 2022

@author: Rasmus SÃ¤fvenberg
"""
import re
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns


def parse_logfile(filename):
    """
    Parse the logfile generated by a LdaModel fitting procedure.
    Author: Marco Kuhlmann

    Returns
    -------
    likelihoods : list
        List of all log-likelihoods during the fitting of a LdaModel.

    """
    matcher = re.compile('(-*\d+\.\d+) per-word .* (\d+\.\d+) perplexity')
    likelihoods = []
    with open(f'{filename}.log') as source:
        for line in source:
            match = matcher.search(line)
            if match:
                likelihoods.append(float(match.group(1)))
    return likelihoods


def plot_loglikelihoods(filename):
    """
    Plot the loglikelihoods present in a given log file.

    Parameters
    ----------
    filename : string
        The name of the file in which the logs are stored.

    Returns
    -------
    None.

    """
    # Parse the log file
    lls = parse_logfile(filename)
    
    # Convert to data frame
    log_likelihoods = pd.DataFrame(lls)
    
    # Since the log contains two values per pass, store them in one colum each
    log_likelihoods = pd.concat([log_likelihoods.iloc[::2, :].reset_index(drop=True), 
                                 log_likelihoods.iloc[1::2, :].reset_index(drop=True)], 
                                axis=1)
    
    # Rename the columns
    log_likelihoods.columns = ["Doc18000", "Doc26000"]
    
    # Add index (i.e. pass #) to the data frame
    log_likelihoods = log_likelihoods.reset_index().rename(columns={"index": "Pass"})
    
    plt.figure(figsize=(8,6))
    sns.lineplot(
        data=log_likelihoods,
        x="Pass", y="Doc18000", color="firebrick", 
        #style=True,  dashes=[(2, 2, 2)], alpha=0.8, 
        legend="full"
    )
    
    sns.lineplot(
        data=log_likelihoods,
        x="Pass", y="Doc26000", color="teal",
        #style=True, dashes=[(2, 2, 2)], alpha=0.8, 
        legend="full"
    )
    
    plt.xlabel("Pass/iteration")
    plt.ylabel("Log Likelihood")
    plt.legend(loc='center right', labels=['Document 18000', 'Document 26000'])
    plt.savefig(f"figures/{filename}log.svg", format="svg")
    plt.show()


if __name__ == "__main__":
    plot_loglikelihoods("lda20")
    plot_loglikelihoods("lda40")
    plot_loglikelihoods("lda60")